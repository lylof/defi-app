generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                   @id @default(cuid())
  name                 String?
  email                String?                  @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  bio                  String?
  points               Int                      @default(0)
  role                 UserRole                 @default(USER)
  isActive             Boolean                  @default(true)
  lastLogin            DateTime?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  accounts             Account[]
  activityLogsAsAdmin  ActivityLog[]            @relation("AdminUser")
  activityLogsAsTarget ActivityLog[]            @relation("TargetUser")
  adminLogs            AdminLog[]
  challenges           Challenge[]              @relation("CreatedBy")
  participations       ChallengeParticipation[]
  comments             Comment[]
  leaderboard          Leaderboard?
  level                Level?
  sessions             Session[]
  submissions          Submission[]
  evaluations          SubmissionEvaluation[]
  badges               UserBadge[]
  notifications        Notification[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  challenges  Challenge[]
}

model Challenge {
  id                       String                   @id @default(cuid())
  title                    String
  description              String
  brief                    String
  points                   Int
  startDate                DateTime
  endDate                  DateTime
  participants             Int                      @default(0)
  categoryId               String
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  isPublished              Boolean                  @default(false)
  allowMultipleSubmissions Boolean                  @default(false)
  maxSubmissions           Int?
  createdById              String
  category                 Category                 @relation(fields: [categoryId], references: [id])
  createdBy                User                     @relation("CreatedBy", fields: [createdById], references: [id])
  participations           ChallengeParticipation[]
  evaluationCriteria       EvaluationCriteria[]
  files                    File[]
  submissions              Submission[]
}

model File {
  id          String    @id @default(uuid())
  challengeId String
  url         String
  name        String
  size        Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id])
}

model ChallengeParticipation {
  id          String    @id @default(uuid())
  userId      String
  challengeId String
  submitted   Boolean   @default(false)
  submission  String?
  evaluated   Boolean   @default(false)
  approved    Boolean   @default(false)
  status      String    @default("PENDING")
  score       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Leaderboard {
  id        String   @id @default(cuid())
  userId    String   @unique
  points    Int      @default(0)
  rank      Int      @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Badge {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String
  image         String
  condition     String
  points        Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         UserBadge[]
  notifications Notification[]
}

model UserBadge {
  id       String   @id @default(uuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, badgeId])
}

model Level {
  id         String   @id @default(uuid())
  userId     String   @unique
  level      Int      @default(1)
  experience Int      @default(0)
  nextLevel  Int      @default(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String
  type        String
  priority    String   @default("MEDIUM")
  read        Boolean  @default(false)
  linkUrl     String?
  imageUrl    String?
  metadata    String?
  relatedId   String?
  relatedType String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  badgeId     String?
  badge       Badge?   @relation(fields: [badgeId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([type])
  @@index([badgeId])
  @@map("notifications")
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model AdminLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  targetId  String
  details   String
  createdAt DateTime @default(now())
  admin     User     @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([targetId])
}

model Submission {
  id          String                 @id @default(cuid())
  content     String
  status      SubmissionStatus       @default(PENDING)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  userId      String
  challengeId String
  challenge   Challenge              @relation(fields: [challengeId], references: [id])
  user        User                   @relation(fields: [userId], references: [id])
  evaluations SubmissionEvaluation[]
}

model ActivityLog {
  id           String    @id @default(cuid())
  action       LogAction
  details      String?
  createdAt    DateTime  @default(now())
  targetUserId String?
  adminUserId  String?
  adminUser    User?     @relation("AdminUser", fields: [adminUserId], references: [id])
  targetUser   User?     @relation("TargetUser", fields: [targetUserId], references: [id])
}

model EvaluationCriteria {
  id          String                 @id @default(cuid())
  name        String
  description String
  weight      Int                    @default(1)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  challengeId String
  challenge   Challenge              @relation(fields: [challengeId], references: [id])
  evaluations SubmissionEvaluation[]
}

model SubmissionEvaluation {
  id           String             @id @default(cuid())
  score        Int
  comment      String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  submissionId String
  criterionId  String
  evaluatorId  String
  criterion    EvaluationCriteria @relation(fields: [criterionId], references: [id])
  evaluator    User               @relation(fields: [evaluatorId], references: [id])
  submission   Submission         @relation(fields: [submissionId], references: [id])

  @@unique([submissionId, criterionId])
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([token])
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([token])
}

enum UserRole {
  USER
  ADMIN
  MEMBER
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LogAction {
  UPDATE_ROLE
  BAN
  UNBAN
  SUBMISSION_APPROVED
  SUBMISSION_REJECTED
}
