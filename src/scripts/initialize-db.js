/**
 * Script d'initialisation de la base de donn√©es
 * 
 * Ce script permet d'initialiser la base de donn√©es et de cr√©er les comptes utilisateurs
 * n√©cessaires au fonctionnement de l'application.
 * 
 * Ex√©cution: node src/scripts/initialize-db.js
 */

const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

// Initialiser le client Prisma
const prisma = new PrismaClient();

// Liste des utilisateurs √† cr√©er
const DEFAULT_USERS = [
  {
    email: "admin@lpt-defi.fr",
    name: "Administrateur",
    password: "Admin123!",
    role: "ADMIN",
    points: 0,
  },
  {
    email: "admin@example.com",
    name: "Administrateur Test",
    password: "admin123",
    role: "ADMIN",
    points: 1000,
  },
  {
    email: "user@example.com",
    name: "Utilisateur Standard",
    password: "password123",
    role: "USER",
    points: 500,
  },
  {
    email: "user1@test.com",
    name: "Utilisateur Test 1",
    password: "Test123!",
    role: "USER",
    points: 100,
  },
  {
    email: "user2@test.com",
    name: "Utilisateur Test 2",
    password: "Test123!",
    role: "USER",
    points: 50,
  },
  {
    email: "user3@test.com",
    name: "Utilisateur Test 3",
    password: "Test123!",
    role: "USER",
    points: 75,
  },
];

/**
 * Fonction principale d'initialisation
 */
async function main() {
  try {
    console.log("\nüîÑ Initialisation de la base de donn√©es...");
    
    // V√©rifier la connexion √† la base de donn√©es
    try {
      await prisma.$queryRaw`SELECT 1 as health_check`;
      console.log("‚úÖ Connexion √† la base de donn√©es √©tablie avec succ√®s");
    } catch (error) {
      console.error("‚ùå Erreur de connexion √† la base de donn√©es:", error);
      process.exit(1);
    }
    
    console.log("\nüîÑ Cr√©ation des comptes utilisateurs...");
    
    const createdUsers = [];
    const updatedUsers = [];
    
    // Traiter chaque utilisateur
    for (const userSeed of DEFAULT_USERS) {
      // V√©rifier si l'utilisateur existe d√©j√†
      const existingUser = await prisma.user.findUnique({
        where: { email: userSeed.email },
      });
      
      // Hasher le mot de passe
      const hashedPassword = await bcrypt.hash(userSeed.password, 10);
      
      if (!existingUser) {
        // Cr√©er l'utilisateur s'il n'existe pas
        const newUser = await prisma.user.create({
          data: {
            email: userSeed.email,
            name: userSeed.name,
            password: hashedPassword,
            role: userSeed.role,
            points: userSeed.points,
            isActive: true,
          },
        });
        
        createdUsers.push(newUser);
        console.log(`‚úÖ Compte cr√©√©: ${userSeed.email} (${userSeed.role})`);
      } else if (!existingUser.isActive) {
        // R√©activer l'utilisateur s'il existe mais n'est pas actif
        const updatedUser = await prisma.user.update({
          where: { email: userSeed.email },
          data: {
            isActive: true,
            password: hashedPassword, // R√©initialiser le mot de passe au cas o√π
          },
        });
        
        updatedUsers.push(updatedUser);
        console.log(`üîÑ Compte r√©activ√©: ${userSeed.email} (${userSeed.role})`);
      } else {
        console.log(`‚úì Compte existant et actif: ${userSeed.email} (${userSeed.role})`);
      }
    }
    
    // R√©sum√© des op√©rations
    if (createdUsers.length > 0 || updatedUsers.length > 0) {
      console.log("\n‚úÖ Initialisation des comptes termin√©e");
      console.log(`üìä ${createdUsers.length} comptes cr√©√©s, ${updatedUsers.length} comptes mis √† jour`);
      
      // Afficher les informations de connexion
      console.log("\nüîë Informations de connexion pour les comptes de test:");
      DEFAULT_USERS.forEach(user => {
        console.log(`- ${user.email} (Mot de passe: ${user.password}) - ${user.role}`);
      });
    } else {
      console.log("\n‚úÖ Tous les comptes sont d√©j√† initialis√©s et actifs");
    }
    
    console.log("\nüéâ Initialisation de la base de donn√©es termin√©e avec succ√®s!");
    
  } catch (error) {
    console.error("‚ùå Erreur lors de l'initialisation de la base de donn√©es:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter la fonction principale
main(); 