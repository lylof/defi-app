import { Adapter } from "next-auth/adapters";

export function PrismaAdapter(): Adapter {
  return {
    createUser: jest.fn().mockResolvedValue({
      id: "1",
      email: "test@example.com",
      name: "Test User",
      emailVerified: null,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
    }),
    getUser: jest.fn().mockResolvedValue({
      id: "1",
      email: "test@example.com",
      name: "Test User",
      emailVerified: null,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
    }),
    getUserByEmail: jest.fn().mockResolvedValue({
      id: "1",
      email: "test@example.com",
      name: "Test User",
      emailVerified: null,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
    }),
    getUserByAccount: jest.fn().mockResolvedValue({
      id: "1",
      email: "test@example.com",
      name: "Test User",
      emailVerified: null,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
    }),
    updateUser: jest.fn().mockResolvedValue({
      id: "1",
      email: "test@example.com",
      name: "Test User",
      emailVerified: null,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
    }),
    deleteUser: jest.fn().mockResolvedValue({
      id: "1",
      email: "test@example.com",
      name: "Test User",
      emailVerified: null,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
    }),
    linkAccount: jest.fn().mockResolvedValue({
      id: "1",
      userId: "1",
      type: "oauth",
      provider: "github",
      providerAccountId: "123",
      access_token: "token",
      expires_at: 1234567890,
      token_type: "bearer",
      scope: "user",
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    }),
    unlinkAccount: jest.fn().mockResolvedValue({
      id: "1",
      userId: "1",
      type: "oauth",
      provider: "github",
      providerAccountId: "123",
      access_token: "token",
      expires_at: 1234567890,
      token_type: "bearer",
      scope: "user",
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    }),
    createSession: jest.fn().mockResolvedValue({
      id: "1",
      userId: "1",
      expires: new Date().toISOString(),
      sessionToken: "token",
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    }),
    getSessionAndUser: jest.fn().mockResolvedValue({
      session: {
        id: "1",
        userId: "1",
        expires: new Date().toISOString(),
        sessionToken: "token",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
      user: {
        id: "1",
        email: "test@example.com",
        name: "Test User",
        emailVerified: null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        lastLogin: new Date().toISOString(),
      },
    }),
    updateSession: jest.fn().mockResolvedValue({
      id: "1",
      userId: "1",
      expires: new Date().toISOString(),
      sessionToken: "token",
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    }),
    deleteSession: jest.fn().mockResolvedValue({
      id: "1",
      userId: "1",
      expires: new Date().toISOString(),
      sessionToken: "token",
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    }),
    createVerificationToken: jest.fn().mockResolvedValue({
      identifier: "test@example.com",
      token: "token",
      expires: new Date().toISOString(),
    }),
    useVerificationToken: jest.fn().mockResolvedValue({
      identifier: "test@example.com",
      token: "token",
      expires: new Date().toISOString(),
    }),
  };
} 
 
 